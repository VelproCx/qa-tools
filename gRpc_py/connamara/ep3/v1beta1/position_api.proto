// Copyright (c) 2022 Connamara Technologies, Inc.
//
// This file is distributed under the terms of the Connamara EP3 Software License Agreement.
//
// The above copyright notice and license notice shall be included in all copies or substantial portions of the Software.

syntax = "proto3";

package connamara.ep3.v1beta1;

option go_package = "ep3v1beta1";
option java_package = "com.connamara.ep3.v1beta1";
option java_outer_classname = "PositionApiProto";
option java_multiple_files = true;
option csharp_namespace = "Connamara.Ep3.V1Beta1";
option objc_class_prefix = "CEX";

import "connamara/ep3/v1beta1/api.proto";

// PositionAPI is the API Surface for connected clients to query position.
service PositionAPI {
    // CreatePositionSubscription creates a subscription for positions.
    rpc CreatePositionSubscription(CreatePositionSubscriptionRequest) returns (stream CreatePositionSubscriptionResponse) {}

    //GetAccountBalance gets the balance for currency in an account.
    rpc GetAccountBalance(GetAccountBalanceRequest) returns (GetAccountBalanceResponse) {}

    //ListAccountBalances lists the currency balances in an account.
    rpc ListAccountBalances(ListAccountBalancesRequest) returns (ListAccountBalancesResponse) {}
}

// Request to start a position subscription to get snapshots and updates for this session.
message CreatePositionSubscriptionRequest {
    // A set of fully qualified resource names of the accounts to filter upon in the subscription (ie: "firms/[firmid]/accounts/[accountid]") (optional).
    repeated string accounts = 1;
}

message CreatePositionSubscriptionResponse {

    // Snapshot is the current state of positions in the system that is returned after the initial subscription request.
    message Snapshot {
        // A list of positions contained in the snapshot.
        repeated Position positions = 1;
    }

    // Update is the current state of positions in the system that is streamed once a position updates.
    message Update {
        // A list of positions contained in the Update message.
        repeated Position positions = 1;
    }

    oneof event {
        Heartbeat heartbeat = 1;
        Snapshot snapshot = 2;
        Update update = 3;
    }
}

//Request to get the balance of the given account in the given currency.
message GetAccountBalanceRequest {
    // Fully qualified resource name of the account to get the balance for (ie: "firms/[firmid]/accounts/[accountid]") (required).
    string name = 1;

    // ISO currency code of the fiat currency for which to get the balance (ie: "USD") (required).
    string currency = 2;
}

message GetAccountBalanceResponse {
    // Fixed point decimal fiat currency balance, not including any security values.
    string balance = 1;

    // Required amount of fiat currency balance that must be held in an account and cannot be used for trading.
    string capital_requirement = 2;

    // Amount of excess capital in the balance beyond the requirement, factoring in all security valuations.
    string excess_capital = 3;

    // Amount of unencumbered capital available for trading, factoring in all security valuations as well as any open orders.
    string buying_power = 4;

    // SecurityEntry describes the detailed valuation of a security with respect to the market price and adjustments applied to augment a base currency's collateral.
    message SecurityEntry {
        // Amount of the security held in the account.
        string balance = 1;

        // The actual mark to market value of the security.
        string market_value = 2;

        // The haircut value of a single unit of the security ID in units of basis points (100 basis points is 1%).
        int64 haircut = 3;

        // Represents the notional value of the security, which is the balance multiplied by the market value.
        string notional_value = 4;

        // Represents the available collateral value of the security, which is the balance multiplied by the market value less the haircut percentage.
        string available_value = 5;
    }

    // Map of securities mapped by ID to their detailed valuation with respect to the market price and adjustments applied.
    map<string, SecurityEntry> securities = 5;

    // Aggregate notional value of all securities.
    string total_security_notional_value = 6;

    // Aggregate available collateral value of all securities.
    string total_security_available_value = 7;
}

// Request to list the balances of a given account for all currencies.
message ListAccountBalancesRequest {
    // Fully qualified resource name of the account to get the balances for (ie: "firms/[firmid]/accounts/[accountid]") (required).
    string name = 1;
}

message ListAccountBalancesResponse {
    // Map of account balances with the currency of the balance as the key.
    map<string, GetAccountBalanceResponse> balances = 1;
}
