// Copyright (c) 2022 Connamara Technologies, Inc.
//
// This file is distributed under the terms of the Connamara EP3 Software License Agreement.
//
// The above copyright notice and license notice shall be included in all copies or substantial portions of the Software.

syntax = "proto3";
package connamara.ep3.orders.v1beta1;

option go_package = "ordersv1beta1";
option java_package = "com.connamara.ep3.orders.v1beta1";
option java_outer_classname = "OrdersAdminApiProto";
option java_multiple_files = true;
option csharp_namespace = "Connamara.Ep3.Orders.V1Beta1";
option objc_class_prefix = "CEO";

import "connamara/ep3/orders/v1beta1/orders.proto";
import "connamara/ep3/fpml/v1beta1/fpml.proto";
import "google/protobuf/timestamp.proto";

// OrdersAdminAPI is the API surface for managing orders on the exchange.
service OrdersAdminAPI {
    // RiskRejectOrder rejects an order that has been placed in a PendingRisk state.
    rpc RiskRejectOrder(RiskRejectOrderRequest) returns(RiskRejectOrderResponse) {}
    
    // RiskApproveOrder approves an order that has been placed in a PendingRisk state.
    rpc RiskApproveOrder(RiskApproveOrderRequest) returns(RiskApproveOrderResponse) {}

    // RiskRejectUpdateOrder rejects an order update that has been placed in a PendingReplace state.
    rpc RiskRejectUpdateOrder(RiskRejectUpdateOrderRequest) returns(RiskRejectUpdateOrderResponse) {}

    // RiskApproveUpdateOrder approves an order update that has been placed in a PendingReplace state.
    rpc RiskApproveUpdateOrder(RiskApproveUpdateOrderRequest) returns(RiskApproveUpdateOrderResponse) {}

    // GetFpmlOrder generates a trade fpml from a given order.
    rpc GetFpmlOrder(GetFpmlOrderRequest) returns (GetFpmlOrderResponse) {}
}

message RiskRejectOrderRequest {
    string symbol = 1;
    string order_id = 2;
    string reject_reason = 3;

    // The time at which this order was risk checked
    google.protobuf.Timestamp risk_check_time = 4;

    // The risk status given by the position risk check
    string collateral_memo = 5;
}

message RiskRejectOrderResponse {}

message RiskApproveOrderRequest {
    string symbol = 1;
    string order_id = 2;

    //Optional approval id token added to the order on approval.
    string approval_id = 3;

    // The time at which this order was risk checked
    google.protobuf.Timestamp risk_check_time = 4;

    // The risk status given by the position risk check
    string collateral_memo = 5;

    // If provided, the price protection mandated by the risk check
    PriceProtection price_protection = 6;
}

message RiskApproveOrderResponse {}

message RiskRejectUpdateOrderRequest {
    CancelReplaceOrderRequest request = 1;
    string reject_reason = 2;
}

message RiskRejectUpdateOrderResponse {}

message RiskApproveUpdateOrderRequest {
    CancelReplaceOrderRequest request = 1;
}

message RiskApproveUpdateOrderResponse {}

message GetFpmlOrderRequest {
    fpml.v1beta1.GeneratorConfig fpml_generator_config = 1;
    string order_id = 2;
}

message GetFpmlOrderResponse {
    string fpml_trade = 1;
}